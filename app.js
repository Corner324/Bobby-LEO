import 'dotenv/config';
import express from 'express';
import {
  InteractionType,
  InteractionResponseType,
  InteractionResponseFlags,
  MessageComponentTypes,
  ButtonStyleTypes,
} from 'discord-interactions';
import { VerifyDiscordRequest, getRandomEmoji, DiscordRequest } from './utils.js';
import { getShuffledOptions, getResult } from './game.js';

import moment from 'moment';


/*
  TODO: –ö–∏–∫ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è []
  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥ []


 */


// Create an express app
const app = express();
// Get port, or default to 3000
const PORT = process.env.PORT || 3000;
// Parse request body and verifies incoming requests using discord-interactions package
app.use(express.json({ verify: VerifyDiscordRequest(process.env.PUBLIC_KEY) }));

// Store for in-progress games. In production, you'd want to use a DB
const activeGames = {};

/**
 * Interactions endpoint URL where Discord will send HTTP requests
 */


app.post('/interactions', async function (req, res) {
  // Interaction type and data
  const { type, id, data } = req.body;

  /**
   * Handle verification requests
   */
  if (type === InteractionType.PING) {
    return res.send({ type: InteractionResponseType.PONG });
  }

  /**
   * Handle slash command requests
   * See https://discord.com/developers/docs/interactions/application-commands#slash-commands
   */
  if (type === InteractionType.APPLICATION_COMMAND) {
    const { name, user } = data;

    // "test" command
    if (name === 'test') {


      let currentDate = new Date();

      // console.log(currentDate.getFullYear());
      // console.log(currentDate.getMonth());
      // console.log(currentDate.getDate());
      // console.log(currentDate.getHours());
      // console.log(currentDate.getMinutes());
      // console.log(currentDate.getSeconds());

      let mainChannel = '/channels/1218918494280745101/messages'

      let messages = await DiscordRequest(mainChannel, {method: 'GET'});

      let messagesData = await messages.json();

      let idLastMessage = messagesData[0]



      //console.log(req.body)
      // console.log(`${currentDate.getDate()}/${currentDate.getMonth()}/${currentDate.getFullYear()}`)
      // console.log(currentDate)

      console.log(idLastMessage.embeds[0].fields)




      let result = Math.floor(Date.parse(idLastMessage)/1000)


      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: `<t:${moment(idLastMessage).unix()}:R>`,
        },
      });
    }

    if (name === 'goods') {


      console.log('–û–¢–í–ï–¢:')
      console.log(prom.id)

      let words = "–ê–∫—Ç–∏–≤–Ω—ã–π –ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π –ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –ë—É–π–Ω—ã–π –í–ª–∏—è—Ç–µ–ª—å–Ω—ã–π –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–π –í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π –í—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ –í–¥—É–º—á–∏–≤—ã–π –ì—Ä–∞—Ü–∏–æ–∑–Ω—ã–π –ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–π –î–µ—Ä–∑–∫–∏–π –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ñ–∏–≤–æ–π –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ó–∞–±–æ—Ç–ª–∏–≤—ã–π –ó–∞–¥—É–º—á–∏–≤—ã–π –ò–≥—Ä–∏–≤—ã–π –ò–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –ò–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ò—Å–∫—Ä–µ–Ω–Ω–∏–π –ò—Å–∫—É—Å–Ω—ã–π –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω—ã–π –õ–µ–≥–∫–∏–π –≤ –æ–±—â–µ–Ω–∏–∏ –õ–æ–≤–∫–∏–π –ú—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ù–∞–¥–µ–∂–Ω—ã–π –ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π –ù–µ–ø—Ä–µ–∫–ª–æ–Ω–Ω—ã–π –ù–µ–ø—Ä–∏–º–∏—Ä–∏–º—ã–π –ù–µ–ø–æ–∫–æ–ª–µ–±–∏–º—ã–π –ù–µ—É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ù–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –û–±–∞—è—Ç–µ–ª—å–Ω—ã–π –û–¥–∞—Ä–µ–Ω–Ω—ã–π –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –û—Å—Ç—Ä–æ—É–º–Ω—ã–π –û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –û—Ç–∑—ã–≤—á–∏–≤—ã–π –ü–æ–Ω–∏–º–∞—é—â–∏–π –ü–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ü–µ—Ä–µ–¥–æ–≤–æ–π –ü—Ä–µ–¥–∞–Ω–Ω—ã–π –ü—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π –ü—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π –ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π –°–∏–ª—å–Ω—ã–π –°–º–µ–ª—ã–π –°–æ–±—Ä–∞–Ω–Ω—ã–π –°–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –°–ø–æ–∫–æ–π–Ω—ã–π –°—Ç–æ–π–∫–∏–π –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –¢–≤–µ—Ä–¥—ã–π –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π –£–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ –£–º–Ω—ã–π –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –£—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π –£—Å–ø–µ—à–Ω—ã–π –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –•—Ä–∞–±—Ä—ã–π –¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π –ß–µ—Å—Ç–Ω—ã–π –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –≠—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π".split(" ")
      // Send a message into the channel where command was triggered from
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          // Fetches a random emoji to send from a helper function
          // Math.random() * (1 - words.length-1) + 1
          content: `<@${req.body.member.user.id}> —Å–∞–º—ã–π ${words[Math.floor(Math.random() * words.length)].toLowerCase()}!`
        },
      });



    }

    if (data.name === 'button') {
      // Send a message with a button
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: 'A message with a button',
          // Buttons are inside of action rows
          components: [
            {
              type: MessageComponentTypes.ACTION_ROW,
              components: [
                {
                  type: MessageComponentTypes.BUTTON,
                  // Value for your app to identify the button
                  custom_id: 'my_button',
                  label: '–í–∑—è—Ç—å –§–¢–û',
                  style: ButtonStyleTypes.PRIMARY,

                },
                {
                  type: MessageComponentTypes.BUTTON,
                  // Value for your app to identify the button
                  custom_id: 'my_button2',
                  label: '–í–∑—è—Ç—å —Å—Ç–∞–∂–µ—Ä–∞',
                  style: ButtonStyleTypes.SECONDARY,

                },
                {
                  type: MessageComponentTypes.BUTTON,
                  // Value for your app to identify the button
                  custom_id: 'my_button3',
                  label: '–í–∑—è—Ç—å –≤ —Ä–æ—Ç',
                  style: ButtonStyleTypes.SUCCESS,

                },
              ],
            },
          ],
        },
      });
    }

    if (data.name === 'list') {
      // Send a message with a button
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data:
            {
              "content": "Mason is looking for new arena partners. What classes do you play?",
              "components": [
                {
                  "type": 1,
                  "components": [
                    {
                      "type": 3,
                      "custom_id": "class_select_1",
                      "options":[
                        {
                          "label": "Rogue",
                          "value": "rogue",
                          "description": "Sneak n stab",
                          "emoji": {
                            "name": "rogue",
                            "id": "625891304148303894"
                          }
                        },
                        {
                          "label": "Mage",
                          "value": "mage",
                          "description": "Turn 'em into a sheep",
                          "emoji": {
                            "name": "mage",
                            "id": "625891304081063986"
                          }
                        },
                        {
                          "label": "Priest",
                          "value": "priest",
                          "description": "You get heals when I'm done doing damage",
                          "emoji": {
                            "name": "priest",
                            "id": "625891303795982337"
                          }
                        }
                      ],
                      "placeholder": "Choose a class",
                      "min_values": 1,
                      "max_values": 3
                    }
                  ]
                }
              ]
            }
      });
    }

    if (data.name === 'select') {
      // Send a message with a button



      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: '',
          // Selects are inside of action rows
          components: [
            {
              type: 1,
              components: [
                {
                  style: 1,
                  label: `–°–¢–ê–ñ–ï–†`,
                  custom_id: `queue`,
                  disabled: false,
                  emoji: {
                    id: null,
                    name: `üë∂üèª`
                  },
                  type: 2
                },
                {
                  style: 2,
                  label: `–í–ó–Ø–¢–¨`,
                  custom_id: `take`,
                  disabled: false,
                  emoji: {
                    id: null,
                    name: `ü§ù`
                  },
                  type: 2
                },
                {
                  style: 3,
                  label: `–§–¢–û`,
                  custom_id: `active`,
                  disabled: false,
                  emoji: {
                    id: null,
                    name: `üë¥üèª`
                  },
                  type: 2
                }
              ]
            }
          ],
          embeds: [
            {
              type: "rich",
              title: `FIELD TRAINING PROGRAM QUEUE`,
              description: "–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è FTO –∏ —Å—Ç–∞–∂–µ—Ä–æ–≤. –°—Ç–∞–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∏–¥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ FTO –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n" +
                  "\n" +
                  "**–°–¢–ê–ñ–ï–†** ‚Äì –≤—Å—Ç–∞—Ç—å/–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–∂–µ—Ä–∞–º–∏.\n" +
                  "**–í–ó–Ø–¢–¨** ‚Äì –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–∂–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FTO.\n" +
                  "**–§–¢–û** ‚Äì –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FTO.\n",
              color: 0x5664F1,
              //image: {url: "https://i.imgur.com/p1wzoEw.png"},
               footer: {text: '–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è ‚Äî –Ω–∞—É—á–∏—Ç—å –æ–±—Ö–æ–¥–∏—Ç—å—Å—è –±–µ–∑ —É—á–∏—Ç–µ–ª—è (–≠. –•–∞–±–±–∞—Ä–¥).'},
              //footer: {text: '–û –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å - corner324', icon_url: 'https://i.imgur.com/vbsliop.png'},
              author: {name: 'FTP Coordinator', icon_url: 'https://i.imgur.com/JKzAl4J.png'},
              fields: [
                {name: '', value: ''},
                {name: '–°–¢–ê–ñ–ï–†–´', value: '\n\u200B', inline: true},
                {name: '–ù–ê–°–¢–ê–í–ù–ò–ö–ò', value: '\n\u200B', inline: true},
              ]
            }
          ]
        },
      });
    }

    if (data.name === 'input') {
      // Send a message with a button

      return res.send({
        type: InteractionResponseType.APPLICATION_MODAL,
        data: {
          "content": "Test",
          "embeds": [{
            "title": "Hello, Embed!",
            "description": "This is an embedded message."
          }]}

      });
    }

    // "challenge" command
    if (name === 'challenge' && id) {
      const userId = req.body.member.user.id;
      // User's object choice
      const objectName = req.body.data.options[0].value;

      // Create active game using message ID as the game ID
      activeGames[id] = {
        id: userId,
        objectName,
      };

      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          // Fetches a random emoji to send from a helper function
          content: `Rock papers scissors challenge from <@${userId}>`,
          components: [
            {
              type: MessageComponentTypes.ACTION_ROW,
              components: [
                {
                  type: MessageComponentTypes.BUTTON,
                  // Append the game ID to use later on
                  custom_id: `accept_button_${req.body.id}`,
                  label: 'Accept',
                  style: ButtonStyleTypes.PRIMARY,
                },
              ],
            },
          ],
        },
      });
    }
  }

  /**
   * Handle requests from interactive components
   * See https://discord.com/developers/docs/interactions/message-components#responding-to-a-component-interaction
   */

  if (type === InteractionType.MESSAGE_COMPONENT) {
    // custom_id set in payload when sending message component
    const componentId = data.custom_id;
    // user who clicked button
    const userId = req.body.member.user.id;

    let mainChannel = '/channels/1218918494280745101/messages'

    let messages = await DiscordRequest(mainChannel, {method: 'GET'});

    let messagesData = await messages.json();

    let idLastMessage = messagesData[0].id


    if (componentId === 'queue') {

      const fromEndpoint = mainChannel + '/' + idLastMessage;


      let first_res = await DiscordRequest(fromEndpoint, {method: 'GET'});

      let result = await first_res.json();


      if (result.embeds[0].fields[1].value.indexOf(`<@${req.body.member.user.id}>`) !== -1) {


        result.embeds[0].fields[1].value = result.embeds[0].fields[1].value.replace(`<@${req.body.member.user.id}>`, "del")
        let index = result.embeds[0].fields[1].value.indexOf(`del`)

        result.embeds[0].fields[1].value = result.embeds[0].fields[1].value.slice(index+20, result.embeds[0].fields[1].value.length)




        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });

      } else {

        let currentDate = new Date();
        let actual_time = moment(currentDate).unix()


        result.embeds[0].fields[1].value += `<@${req.body.member.user.id}> <t:${actual_time}:R> \n\u200B`;
        //result.embeds[0].fields[1].value += "123 \n\u200B\n\u200B\n\u200B\n";
        console.log('–°–¢–ê–õ–û:')
        console.log(`1 ${result.embeds[0].fields[1].value} 2`)
        console.log('–¢–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª–µ–Ω')

        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ —Å—Ç–∞–∂–µ—Ä`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });

      }


      const ToEndpoint = mainChannel + '/' + idLastMessage;


      //console.log(result.embeds[0].fields.at(0))


      await DiscordRequest(ToEndpoint, {
        method: 'PATCH',
        body: {
          embeds: result.embeds
        },
      });


    }

    if (componentId === 'active') {

      const fromEndpoint = mainChannel + '/' + idLastMessage;

      let first_res = await DiscordRequest(fromEndpoint, {method: 'GET'});

      let result = await first_res.json();

      const ToEndpoint = mainChannel + '/' + idLastMessage;


      if (result.embeds[0].fields[2].value.indexOf(`<@${req.body.member.user.id}>`) !== -1) {

        result.embeds[0].fields[2].value = result.embeds[0].fields[2].value.replace(`<@${req.body.member.user.id}>`, "")



        result.embeds[0].fields[2].value = result.embeds[0].fields[2].value.replace(`<@${req.body.member.user.id}>`, "del")

        let index = result.embeds[0].fields[2].value.indexOf(`del`)
        result.embeds[0].fields[2].value = result.embeds[0].fields[2].value.slice(index+20, result.embeds[0].fields[2].value.length)

        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });

      } else {

        let currentDate = new Date();
        let actual_time = moment(currentDate).unix()

        result.embeds[0].fields[2].value += `<@${req.body.member.user.id}> <t:${actual_time}:R>\n\u200B`;
        console.log('–¢–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª–µ–Ω')

        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ –§–¢–û`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });

      }

      await DiscordRequest(ToEndpoint, {
        method: 'PATCH',
        body: {
          embeds: result.embeds
        },
      });


    }

    if (componentId === 'take') {

      const fromEndpoint = mainChannel + '/' + idLastMessage;

      let first_res = await DiscordRequest(fromEndpoint, {method: 'GET'});

      let result = await first_res.json();

      const ToEndpoint = mainChannel + '/' + idLastMessage;

      let currentDate = new Date();
      let actual_time = moment(currentDate).unix()



      if(result.embeds[0].fields[1].value.length === 0){
        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤, –∫–æ–≥–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –±—Ä–∞—Ç—å?!`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });
        return;
      }

      try {
        result.embeds[0].fields[2].value = result.embeds[0].fields[2].value.replace(`<@${req.body.member.user.id}>`, "del")
        let index = result.embeds[0].fields[2].value.indexOf(`del`)
        result.embeds[0].fields[2].value = result.embeds[0].fields[2].value.slice(index+20, result.embeds[0].fields[2].value.length)

        let prob = result.embeds[0].fields[1].value.split('\n\u200B')[0] // get first probation

        console.log('–¢–ï–ü–ï–†–¨:')
        console.log(result.embeds[0].fields[1].value)

        let count_probation = result.embeds[0].fields[1].value.split('\n\u200B').length

        result.embeds[0].fields[1].value = result.embeds[0].fields[1].value.split('\n\u200B').slice(1,count_probation).join('\n\u200B')
        //

        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–í—ã –≤–∑—è–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞ ${prob.split(" ")[0]}, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã!`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });
      } catch (err) {
        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: `–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–Ω—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å!`,
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
          }
        });
      }


      await DiscordRequest(ToEndpoint, {
        method: 'PATCH',
        body: {
          embeds: result.embeds
        },
      });
    }
  }




  if (type === InteractionType.MESSAGE_COMPONENT) {
    // custom_id set in payload when sending message component
    const componentId = data.custom_id;

    if (componentId.startsWith('accept_button_')) {
      // get the associated game ID
      const gameId = componentId.replace('accept_button_', '');
      // Delete message with token in request body
      const endpoint = `webhooks/${process.env.APP_ID}/${req.body.token}/messages/${req.body.message.id}`;
      try {
        await res.send({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: 'What is your object of choice?',
            // Indicates it'll be an ephemeral message
            flags: InteractionResponseFlags.EPHEMERAL,
            components: [
              {
                type: MessageComponentTypes.ACTION_ROW,
                components: [
                  {
                    type: MessageComponentTypes.STRING_SELECT,
                    // Append game ID
                    custom_id: `select_choice_${gameId}`,
                    options: getShuffledOptions(),
                  },
                ],
              },
            ],
          },
        });
        // Delete previous message
        await DiscordRequest(endpoint, { method: 'DELETE' });
      } catch (err) {
        console.error('Error sending message:', err);
      }
    } else if (componentId.startsWith('select_choice_')) {
      // get the associated game ID
      const gameId = componentId.replace('select_choice_', '');

      if (activeGames[gameId]) {
        // Get user ID and object choice for responding user
        const userId = req.body.member.user.id;
        const objectName = data.values[0];
        // Calculate result from helper function
        const resultStr = getResult(activeGames[gameId], {
          id: userId,
          objectName,
        });

        // Remove game from storage
        delete activeGames[gameId];
        // Update message with token in request body
        const endpoint = `webhooks/${process.env.APP_ID}/${req.body.token}/messages/${req.body.message.id}`;

        try {
          // Send results
          await res.send({
            type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
            data: { content: resultStr },
          });
          // Update ephemeral message
          await DiscordRequest(endpoint, {
            method: 'PATCH',
            body: {
              content: 'Nice choice ' + getRandomEmoji(),
              components: [],
            },
          });
        } catch (err) {
          console.error('Error sending message:', err);
        }
      }
    }
  }
});

app.listen(PORT, () => {
  console.log('Listening on port', PORT);
});
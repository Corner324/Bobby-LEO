import 'dotenv/config';
import express from 'express';
import {
  InteractionType,
  InteractionResponseType,
  InteractionResponseFlags,
} from 'discord-interactions';
import { VerifyDiscordRequest, DiscordRequest } from './utils.js';
import moment from 'moment';
import { check_more_hour } from './queueManager.js';

const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.json({ verify: VerifyDiscordRequest(process.env.PUBLIC_KEY) }));

function twoDigits(d) {
  return (d < 10 ? '0' : '') + d;
}

const sleep = ms => new Promise(r => setTimeout(r, ms));


async function loop() {
  while (true) {
    await sleep(1 * 60 * 1000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 1 –º–∏–Ω—É—Ç–∞

    await DiscordRequest(process.env.DEV_CHANNEL, {
      method: 'POST',
      body: {
        content: `Server Working - ${new Date().getUTCDate()}.${twoDigits(new Date().getUTCMonth() + 1)}.${new Date().getFullYear()} ${twoDigits(new Date().getUTCHours() + 3)}:${twoDigits(new Date().getUTCMinutes())}`
      },
    });

    await check_more_hour();
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
 */
const formatTime = (time) => (time < 10 ? '0' : '') + time;

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
const log = (message, level = 'INFO') => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${level}] ${message}`);
};

/**
 * –°–æ–∑–¥–∞–µ—Ç embed-–ª–æ–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ç—Ä—É–ª—è
 * @param {string} trainee - ID —Å—Ç–∞–∂–µ—Ä–∞
 * @param {string} trainer - ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
 * @param {number} timestamp - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UNIX
 * @returns {Object} Embed-–æ–±—ä–µ–∫—Ç
 */
function createPatrolEmbed(trainee, trainer, timestamp) {
  return [
    {
      type: 'rich',
      title: `üìã Patrol Log - ${new Date().getUTCDate()}.${twoDigits(Number(new Date().getUTCMonth()) + 1)}.${new Date().getFullYear()} ${twoDigits(new Date().getUTCHours() + 3)}:${twoDigits(new Date().getUTCMinutes())}`,
      description: `–û—Ç—á–µ—Ç –æ –ø–∞—Ç—Ä—É–ª–µ —Å–æ —Å—Ç–∞–∂–µ—Ä–æ–º\n\u200B–ü–∞—Ç—Ä—É–ª—å –±—ã–ª –Ω–∞—á–∞—Ç: <t:${timestamp}:R>`,
      color: 0x5664F1,
      footer: { text: '–û –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å - corner324', icon_url: 'https://i.imgur.com/vbsliop.png' },
      fields: [
        { name: '', value: '' },
        { name: '–°—Ç–∞–∂–µ—Ä', value: `${trainee}`, inline: true },
        { name: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫', value: `${trainer}`, inline: true },
      ],
    },
  ];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–µ—Ç–∫—É –¥–ª—è –ø–∞—Ç—Ä—É–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {string} channelId - ID –ª–æ–≥-–∫–∞–Ω–∞–ª–∞
 * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} trainerId - ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
 * @param {string} traineeId - ID —Å—Ç–∞–∂–µ—Ä–∞
 */
async function createPatrolThread(channelId, messageId, trainerId, traineeId) {
  const endpointThread = `${channelId}/${messageId}/threads`;
  const threadName = `üîó –í–µ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ç—Ä—É–ª—è ${new Date().getUTCDate()}-${twoDigits(new Date().getUTCMonth())}`;
  
  // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
  await DiscordRequest(endpointThread, {
    method: 'POST',
    body: {
      name: threadName,
      auto_archive_duration: 60,
      message: { content: '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –ø–∞—Ç—Ä—É–ª—è' },
    },
  });

  const threadId = endpointThread.split('/')[4];

  // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤–µ—Ç–∫—É
  await DiscordRequest(`/channels/${threadId}/thread-members/${trainerId}`, { method: 'PUT' });
  await DiscordRequest(`/channels/${threadId}/thread-members/${traineeId}`, { method: 'PUT' });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ
  await DiscordRequest(`/channels/${threadId}/messages`, {
    method: 'POST',
    body: {
      content: `üëã –ü—Ä–∏–≤–µ—Ç, <@${traineeId}> –∏ <@${trainerId}>! –≠—Ç–∞ –≤–µ—Ç–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å, —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ OOC –¥–µ–π—Å—Ç–≤–∏—è.\n\u200B–ñ–µ–ª–∞—é –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã!\n\u200B–û–¥–Ω–∞–∫–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Å!`,
    },
  });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
 */
async function getLastMessage(channelId) {
  try {
    const messagesResponse = await DiscordRequest(channelId, { method: 'GET' });
    const messagesData = await messagesResponse.json();
    if (!messagesData?.length) throw new Error('–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');

    const lastMessageId = messagesData[0].id;
    const endpoint = `${channelId}/${lastMessageId}`;
    const lastMessageResponse = await DiscordRequest(endpoint, { method: 'GET' });
    return { lastMessage: await lastMessageResponse.json(), endpoint };
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`, 'ERROR');
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
async function updateEmbed(endpoint, embeds) {
  await DiscordRequest(endpoint, {
    method: 'PATCH',
    body: { embeds },
  });
  log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ä—É–ª—è
 */
async function finishPatrol(req, res) {
  try {
    const messageId = req.body.message.id;
    const endpoint = `${process.env.LOG_CHANNEL_PD}/${messageId}`;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    await DiscordRequest(endpoint, {
      method: 'PATCH',
      body: {
        components: [{
          type: 1,
          components: [{
            style: 1,
            label: '–ü–ê–¢–†–£–õ–¨ –ó–ê–í–ï–†–®–ï–ù',
            custom_id: 'finish_patrol',
            disabled: true,
            emoji: { name: 'üèÅ' },
            type: 2,
          }],
        }],
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏—è
    const logResponse = await DiscordRequest(endpoint, { method: 'GET' });
    const logData = await logResponse.json();

    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    const startTime = Number(logData.embeds[0].description.split(' ')[7].replace('<t:', '').replace(':R>', ''));
    const elapsedTime = moment().unix() - startTime;
    const duration = new Date(elapsedTime * 1000);

    // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    logData.embeds[0].description += `\n\u200B–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatTime(duration.getUTCHours())}:${formatTime(duration.getUTCMinutes())}`;
    await updateEmbed(endpoint, [logData.embeds[0]]);

    // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendEphemeralMessage(res, `## üìã –ü–∞—Ç—Ä—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\u200B
**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${formatTime(duration.getUTCHours())}:${formatTime(duration.getUTCMinutes())}`);
    log(`–ü–∞—Ç—Ä—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}.`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ç—Ä—É–ª—è: ${error.message}`, 'ERROR');
    await sendEphemeralMessage(res, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ç—Ä—É–ª—è.');
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
 */
function toggleTrainerInQueue(trainers, userId, username, timestamp) {
  const trainersList = trainers.split('\n\u200B').filter(Boolean);
  if (trainers.includes(`<@${userId}>`)) {
    log(`–§–¢–û ${username} –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`);
    return trainersList.filter(entry => !entry.includes(`<@${userId}>`)).join('\n\u200B');
  }
  log(`–§–¢–û ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.`);
  trainersList.push(`<@${userId}> <t:${timestamp}:R>`);
  return trainersList.join('\n\u200B');
}

/**
 * –ë–µ—Ä–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 * @param {string} probations - –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–∂–µ—Ä–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
 */
function takeFirstTrainee(probations) {
  const probationsList = probations.split('\n\u200B').filter(Boolean); // –†–∞–∑–±–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  if (probationsList.length === 0) {
    return { trainee: null, updatedProbations: '' }; // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
  }

  const trainee = probationsList.shift(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞
  return { trainee, updatedProbations: probationsList.join('\n\u200B') }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–∂–µ—Ä–æ–≤
 */
function toggleTraineeInQueue(probations, userId, username, timestamp) {
  const probationsList = probations.split('\n\u200B').filter(Boolean); // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
  if (probations.includes(`<@${userId}>`)) {
    log(`–°—Ç–∞–∂–µ—Ä ${username} –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å.`);
    return probationsList.filter(entry => !entry.includes(`<@${userId}>`)).join('\n\u200B'); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞
  }
  log(`–°—Ç–∞–∂–µ—Ä ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.`);
  probationsList.push(`<@${userId}> <t:${timestamp}:R>`); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
  return probationsList.join('\n\u200B');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendEphemeralMessage(res, content) {
  await res.send({
    type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
    data: {
      flags: InteractionResponseFlags.EPHEMERAL,
      content,
    },
  });
}

app.post('/interactions', async (req, res) => {
  const { type, data, member } = req.body;

  if (type === InteractionType.PING) {
    return res.send({ type: InteractionResponseType.PONG });
  }

  try {
    if (type === InteractionType.MESSAGE_COMPONENT) {
      const { custom_id: componentId } = data;
      const { id: userId, username } = member.user;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { lastMessage, endpoint } = await getLastMessage(process.env.MAIN_CHANNEL_PD);
      if (!lastMessage) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é.');

      const fields = lastMessage.embeds[0].fields;
      let probations = fields[1].value || '';
      let trainers = fields[2].value || '';
      const currentTime = moment().unix();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–ê–¢–†–£–õ–¨ –ó–ê–í–ï–†–®–ï–ù"
      if (componentId === 'finish_patrol') {
        return await finishPatrol(req, res);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–§–¢–û"
      if (componentId === 'active') {
        trainers = toggleTrainerInQueue(trainers, userId, username, currentTime);
        lastMessage.embeds[0].fields[2].value = trainers;
        await updateEmbed(endpoint, [lastMessage.embeds[0]]);
        await sendEphemeralMessage(res, '‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¢–ê–ñ–ï–†"
      if (componentId === 'queue') {
        probations = toggleTraineeInQueue(probations, userId, username, currentTime);
        lastMessage.embeds[0].fields[1].value = probations;
        await updateEmbed(endpoint, [lastMessage.embeds[0]]);
        await sendEphemeralMessage(
          res,
          probations.includes(`<@${userId}>`)
            ? '‚úÖ –í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ —Å—Ç–∞–∂–µ—Ä.'
            : '‚è™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.'
        );
      }

      if (componentId === 'take') {
        if (!probations) {
          log('–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å —Å—Ç–∞–∂–µ—Ä–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.', 'WARN');
          return await sendEphemeralMessage(res, '‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤.');
        }
      
        try {
          // –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
          const trainersList = trainers.split('\n\u200B').filter(Boolean);
          const updatedTrainers = trainersList.filter(entry => !entry.includes(`<@${userId}>`)).join('\n\u200B');
          trainers = updatedTrainers;
      
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          const probationsList = probations.split('\n\u200B').filter(Boolean);
          const trainee = probationsList.shift();
          if (!trainee) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞–∂–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏.');
          probations = probationsList.join('\n\u200B');
      
          const traineeId = trainee.split(' ')[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞
          const currentTime = moment().unix();
      
          // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –æ—á–µ—Ä–µ–¥—å—é
          lastMessage.embeds[0].fields[1].value = probations;
          lastMessage.embeds[0].fields[2].value = trainers;
          await updateEmbed(endpoint, [lastMessage.embeds[0]]);
      
          // –°–æ–∑–¥–∞–µ–º embed-–ª–æ–≥
          const patrolEmbed = createPatrolEmbed(traineeId, `<@${userId}>`, currentTime);
          const logResponse = await DiscordRequest(process.env.LOG_CHANNEL_PD, {
            method: 'POST',
            body: { embeds: patrolEmbed },
          });
      
          const logData = await logResponse.json();
          const logMessageId = logData.id;
      
          // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          await createPatrolThread(process.env.LOG_CHANNEL_PD, logMessageId, userId, traineeId.replace(/[<>@]/g, ''));
      
          // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É, —á—Ç–æ –æ–Ω –≤–∑—è–ª —Å—Ç–∞–∂–µ—Ä–∞
          log(`–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ ${username} –≤–∑—è–ª —Å—Ç–∞–∂–µ—Ä–∞ ${traineeId}.`);
          await sendEphemeralMessage(res, `‚úÖ –í—ã –≤–∑—è–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞ ${traineeId}. –£–¥–∞—á–Ω–æ–π —Å–º–µ–Ω—ã!`);
        } catch (error) {
          log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞: ${error.message}`, 'ERROR');
          await sendEphemeralMessage(res, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞.');
        }
      }
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'ERROR');
    await sendEphemeralMessage(res, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.');
  }
});


app.listen(PORT, '127.0.0.1', async () => {
  console.log('Listening on port', PORT);
  await loop();
});
